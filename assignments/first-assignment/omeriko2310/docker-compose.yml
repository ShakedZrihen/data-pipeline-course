version: '3.8'

services:
  elasticmq:
    image: softwaremill/elasticmq:latest
    ports:
      - "9324:9324"
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf

  lambda-scraper:
    build:
      context: ./lambda-scraper
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=us-east-1
      - SQS_ENDPOINT_URL=http://elasticmq:9324
    ports:
      - "8000:8000"
    depends_on:
      - elasticmq

  lambda-processor:
    build:
      context: ./lambda-processor
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=us-east-1
      - SQS_ENDPOINT_URL=http://elasticmq:9324
    ports:
      - "8002:8002"
    depends_on:
      - elasticmq

  lambda-crud:
    build:
      context: ./lambda-crud
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=us-east-1
      - SQS_ENDPOINT_URL=http://elasticmq:9324
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD= ${POSTGRES_PASSWORD}
      - POSTGRES_DB= ${POSTGRES_DB}
      - POSTGRES_HOST=postgres
    ports:
      - "8001:8001"
    depends_on:
      - elasticmq

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
